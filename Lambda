import logging
import requests
import azure.functions as func
from openai import AzureOpenAI
import traceback
import base64

# --- Hardcoded Configuration ---
AZURE_OPENAI_ENDPOINT = "https://copilot-openai-poc.openai.azure.com/"
AZURE_OPENAI_KEY = "2bde1df08ad2462c812a6402da38d6e4"
AZURE_OPENAI_DEPLOYMENT = "gpt-4"
AZURE_DEVOPS_ORG = "Alshaya-DevOps"
AZURE_DEVOPS_PROJECT = "Mha_Alshaya_AgenticAI_Poc"
REPO_ID = "716fc091-6a27-4670-8a04-67de9b003a0b"
PAT = "Df2kp1e6K7Q4gokpDCh4slaBN9xEf2lQNSjnz16m6WdnZTfNJ8QSJQQJ99BGACAAAAAbFsp6AAASAZDO1PoN"

# Initialize Azure OpenAI client
client = AzureOpenAI(
    api_key=AZURE_OPENAI_KEY,
    api_version="2024-02-15-preview",
    azure_endpoint=AZURE_OPENAI_ENDPOINT,
)

def get_basic_auth_header():
    token = base64.b64encode(f":{PAT}".encode()).decode()
    return {"Authorization": f"Basic {token}"}

def get_pr_commit_id(pr_id):
    logging.info(f"Retrieving commit ID for PR ID: {pr_id}")
    url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/{REPO_ID}/pullRequests/{pr_id}?api-version=7.1-preview.1"
    headers = get_basic_auth_header()
    resp = requests.get(url, headers=headers)
    
    if resp.status_code != 200:
        logging.error(f"Failed to get PR info: {resp.status_code} - {resp.text}")
        return None
    
    pr_json = resp.json()
    commit_id = pr_json.get("lastMergeSourceCommit", {}).get("commitId")
    logging.info(f"PR {pr_id} commit ID: {commit_id}")
    return commit_id

def get_changed_files(pr_id):
    logging.info(f"Retrieving changed files for PR ID: {pr_id}")
    headers = get_basic_auth_header()
    url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/{REPO_ID}/pullRequests/{pr_id}/iterations?api-version=7.1-preview.1"
    resp = requests.get(url, headers=headers)
    
    if resp.status_code != 200:
        logging.error(f"Failed to get PR iterations: {resp.status_code} - {resp.text}")
        return []
    
    iterations = resp.json().get("value", [])
    if not iterations:
        logging.warning("No iterations found for PR.")
        return []

    last_iteration_id = iterations[-1]["id"]
    logging.info(f"Last iteration ID: {last_iteration_id}")
    
    url_changes = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/{REPO_ID}/pullRequests/{pr_id}/iterations/{last_iteration_id}/changes?api-version=7.1-preview.1"
    resp_changes = requests.get(url_changes, headers=headers)
    
    if resp_changes.status_code != 200:
        logging.error(f"Failed to get iteration changes: {resp_changes.status_code} - {resp_changes.text}")
        return []
    
    changes = resp_changes.json().get("changes", [])
    changed_files = []
    for change in changes:
        path = change.get("item", {}).get("path")
        if path:
            changed_files.append(path)
            logging.info(f"Changed file: {path}")
    
    logging.info(f"Total changed files: {len(changed_files)}")
    return changed_files

def fetch_file_content(file_path, commit_id):
    logging.info(f"Fetching content for file: {file_path} at commit ID: {commit_id}")
    headers = get_basic_auth_header()
    url = (
        f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/"
        f"{REPO_ID}/items?path={file_path}&versionDescriptor.version={commit_id}&includeContent=true&api-version=7.1-preview.1"
    )
   
    resp = requests.get(url, headers=headers)
    
    if resp.status_code != 200:
        logging.error(f"Failed to fetch file content: {resp.status_code} - {resp.text}")
        return None
    
    file_content = resp.json().get("content")
    logging.info(f"Fetched content for file: {file_path}")
    return file_content

def process_pr(pr_id):
    logging.info(f"Processing PR ID: {pr_id}")
    
    commit_id = get_pr_commit_id(pr_id)
    if not commit_id:
        logging.error("No commit ID found, aborting process.")
        return
    
    changed_files = get_changed_files(pr_id)
    if not changed_files:
        logging.error("No changed files found, aborting process.")
        return
    
    for file_path in changed_files:
        content = fetch_file_content(file_path, commit_id)
        if content:
            # Here you can process the content with Azure OpenAI
            response = client.completions.create(
                deployment_id=AZURE_OPENAI_DEPLOYMENT,
                prompt=content,
                max_tokens=150,
                temperature=0.7
            )
            logging.info(f"OpenAI response for file {file_path}: {response.choices[0].text.strip()}")

def main(req: func.HttpRequest) -> func.HttpResponse:
    logging.info("Function triggered.")
    pr_id = req.params.get('pr_id')
    
    if not pr_id:
        logging.error("PR ID is missing in the query string.")
        return func.HttpResponse(
            "Please pass a PR ID in the query string.",
            status_code=400
        )
    
    try:
        logging.info(f"Processing PR ID: {pr_id}")
        process_pr(pr_id)
        return func.HttpResponse(f"Processed PR ID: {pr_id}", status_code=200)
    except Exception as e:
        logging.error(f"Error processing PR: {str(e)}")
        return func.HttpResponse(
            "An error occurred while processing the PR.",
            status_code=500
        )
